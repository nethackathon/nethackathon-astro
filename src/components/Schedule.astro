<h2>
  Schedule <span style="font-size: medium;"
    >All times <span id="time-zone">UTC</span></span
  >
</h2>
<table>
  <colgroup>
    <col style="width: 6em;" />
    <col style="width: 7em;" />
    <col style="width: 10em;" />
    <col />
  </colgroup>
  <thead>
    <tr>
      <th class="hide-second"></th>
      <th>Date</th>
      <th>Channel</th>
      <th class="hide-first">Notes</th>
    </tr>
  </thead>
  <tbody id="schedule-tbody"></tbody>
</table>

<style is:global>
  table {
    border-collapse: collapse;
    margin-bottom: 1em;
    width: 100%;
    font-size: 13pt;
  }
  td {
    border-bottom: 1px solid;
    padding: 16px;
    height: 21px;
    line-height: 21px;
  }
  td[data-theme="dark"] {
    border-bottom-color: var(--color-light);
  }
  td[data-theme="light"] {
    border-bottom-color: var(--color-dark);
  }
  tr.current-streamer {
    background-color: rgba(150, 149, 248, 0.5);
  }
  @media (max-width: 800px) {
    .hide-first {
      display: none;
    }
  }
  @media (max-width: 515px) {
    .hide-second {
      display: none;
    }
  }
</style>

<script client:load>
  import { DateTime } from "luxon";

  function parseStartTime(start: string) {
    const dateTime = DateTime.fromISO(start);
    return {
      day: dateTime.weekdayLong,
      time: dateTime.toLocaleString(DateTime.TIME_SIMPLE),
    };
  }

  async function loadSchedule() {
    const scheduleTbody = document.getElementById("schedule-tbody");
    const response = await fetch(
      "https://api.nethackathon.org/event/current/schedule",
    );
    const data = await response.json();
    const timeZone = document.getElementById("time-zone");
    if (!timeZone) return;
    timeZone.textContent = DateTime.local().offsetNameShort;
    let lastWeekday = "";
    data.forEach((streamer) => {
      const tr = document.createElement("tr");
      tr.classList.add("schedule-row");
      const startTime = parseStartTime(streamer.start_time);
      const td0 = document.createElement("td");
      td0.classList.add("weekday");
      td0.classList.add("hide-second");
      if (startTime.day !== lastWeekday) {
        lastWeekday = startTime.day;
        td0.innerHTML = startTime.day;
      }
      tr.appendChild(td0);
      const td1 = document.createElement("td");
      td1.classList.add("start-time");
      td1.dataset.start = streamer.start_time;
      td1.innerHTML = startTime.time;
      tr.appendChild(td1);
      const td2 = document.createElement("td");
      td2.innerHTML = `<a href="https://twitch.tv/${streamer.username}">${streamer.username}</a>`;
      tr.appendChild(td2);
      const td3 = document.createElement("td");
      td3.classList.add("hide-first");
      td3.innerHTML = streamer.notes ? streamer.notes : "";
      tr.appendChild(td3);
      scheduleTbody.appendChild(tr);
    });
  }

  function highlightCurrentStreamer() {
    const trs = document.getElementsByClassName("schedule-row");
    let currentStreamer = false;
    for (let i = trs.length - 1; i > -1; i--) {
      const td = trs[i].getElementsByClassName("start-time")[0];
      const dateTime = DateTime.fromISO(td.dataset.start).toLocal();
      if (!currentStreamer && dateTime < DateTime.local()) {
        currentStreamer = true;
        trs[i].classList.add("current-streamer");
      } else {
        trs[i].classList.remove("current-streamer");
      }
    }
  }

  window.addEventListener("load", async () => {
    await loadSchedule();
    highlightCurrentStreamer();
    setInterval(() => {
      highlightCurrentStreamer();
    }, 5000);
  });
</script>
