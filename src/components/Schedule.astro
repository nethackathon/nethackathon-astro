---
const { nodeApi } = Astro.props;
const scheduleEndpoint = `${nodeApi}/event/current/schedule`;
---

<section class="double c">
  <h2>
    Schedule <span style="font-size: medium;"
      >All times <span id="time-zone">UTC</span></span
    >
  </h2>
  <table>
    <colgroup>
      <col class="date-col" />
      <col style="width: 10em;" />
      <col />
    </colgroup>
    <thead>
      <tr>
        <th>Date</th>
        <th>Channel</th>
        <th class="hide-first">Notes</th>
      </tr>
    </thead>
    <tbody id="schedule-tbody"></tbody>
  </table>
</section>

<style is:global>
  table {
    border-collapse: collapse;
    margin-bottom: 1em;
    width: 100%;
    font-size: 13pt;
  }
  td {
    border-bottom: 1px solid;
    padding: 16px;
    height: 21px;
    line-height: 21px;
  }
  td[data-theme="dark"] {
    border-bottom-color: var(--color-light);
  }
  td[data-theme="light"] {
    border-bottom-color: var(--color-dark);
  }
  .date-col {
    width: 14em;
  }
  tr.current-streamer {
    background-color: rgba(150, 149, 248, 0.5);
  }
  @media (max-width: 800px) {
    .date-col {
      width: 7em;
    }
    .hide-first {
      display: none;
    }
  }
</style>

<script is:inline define:vars={{ scheduleEndpoint }}>
  function parseStartTime(isoString) {
    const date = new Date(isoString);
    return {
      day: getWeekdayLong(date),
      time: formatTime(date),
    };
  }

  function getWeekdayLong(date) {
    const day = date.toLocaleDateString(undefined, { weekday: "long" });
    const monthAndDate = date.toLocaleDateString(undefined, {
      month: "long",
      day: "numeric",
    });
    return `${day}, ${monthAndDate}`;
  }

  function formatTime(date) {
    return date.toLocaleTimeString(undefined, {
      hour: "numeric",
      minute: "2-digit",
      hour12: true,
    });
  }

  function getTimezoneAbbreviation() {
    const options = { timeZoneName: "short" };
    const timeZoneString = new Intl.DateTimeFormat("en-US", options)
      .formatToParts(new Date())
      .find((part) => part.type === "timeZoneName").value;
    return timeZoneString;
  }

  async function loadSchedule() {
    const scheduleTbody = document.getElementById("schedule-tbody");
    const response = await fetch(scheduleEndpoint);
    const data = await response.json();
    const timeZone = document.getElementById("time-zone");
    if (!timeZone) return;
    timeZone.textContent = getTimezoneAbbreviation();
    let lastWeekday = "";
    data.forEach((streamer) => {
      const tr = document.createElement("tr");
      tr.classList.add("schedule-row");
      const startTime = parseStartTime(streamer.start_time);
      const td1 = document.createElement("td");
      td1.classList.add("start-time");
      td1.dataset.start = streamer.start_time;
      td1.innerHTML = startTime.time;
      if (startTime.day !== lastWeekday) {
        lastWeekday = startTime.day;
        td1.innerHTML = `${startTime.day}, ${startTime.time}`;
      }
      tr.appendChild(td1);
      const td2 = document.createElement("td");
      td2.innerHTML = `<a href="https://twitch.tv/${streamer.username}">${streamer.username}</a>`;
      tr.appendChild(td2);
      const td3 = document.createElement("td");
      td3.classList.add("hide-first");
      td3.innerHTML = streamer.notes ? streamer.notes : "";
      tr.appendChild(td3);
      scheduleTbody.appendChild(tr);
    });
  }

  function highlightCurrentStreamer() {
    const trs = document.getElementsByClassName("schedule-row");
    let currentStreamer = false;
    const now = new Date();

    for (let i = trs.length - 1; i > -1; i--) {
      const td = trs[i].getElementsByClassName("start-time")[0];
      const streamStartTime = new Date(td.dataset.start);

      if (!currentStreamer && streamStartTime < now) {
        currentStreamer = true;
        trs[i].classList.add("current-streamer");
      } else {
        trs[i].classList.remove("current-streamer");
      }
    }
  }

  window.addEventListener("load", async () => {
    await loadSchedule();
    highlightCurrentStreamer();
    setInterval(() => {
      highlightCurrentStreamer();
    }, 5000);
  });
</script>
