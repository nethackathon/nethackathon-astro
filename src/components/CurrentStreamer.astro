---
const { currentEvent } = Astro.props;
---

<section class="double a" id="current-streamer" data-start={currentEvent.eventStart} >
  <h2>Currently streaming: <a href="#" id="currently-streaming"></a></h2>
  <h3 id="up-next-h3">Up next: <a href="#" id="up-next"></a></h3>
  <div id="twitch-embed"></div>
</section>

<style>
  #current-streamer {
    display: none;
  }
</style>

<script src="../js/twitch-embed-v1.js" ></script>

<script>
  import { DateTime } from "luxon";
  import type { Streamer } from "../interfaces/streamer";

  function getCurrentStreamer(schedule: Streamer[], twitchEmbed) : string {
    const currentStreamerSection = document.getElementById('current-streamer');
    if (!currentStreamerSection) return "";
    const eventStart = currentStreamerSection.dataset.start;
    const eventStarted = DateTime.now() >= DateTime.fromISO(eventStart);
    if (eventStarted) {
      currentStreamerSection.style.display = 'block';
    } else {
      return "";
    }
    const now = DateTime.now();
    let current = 0;
    let next = 1;
    for (let i = 0; i < schedule.length; i++) {
      if (now > DateTime.fromISO(schedule[i].start_time)) {
        current = i;
        next = i + 1;
      } else {
        break;
      }
    }
    let currentStreamer = schedule[current].username;
    let streamerLink = document.getElementById('currently-streaming');
    if (!streamerLink) return "";

    streamerLink.setAttribute('href', `https://twitch.tv/${currentStreamer}`);
    streamerLink.innerText = currentStreamer;
    if (twitchEmbed !== null)
      twitchEmbed.setChannel(currentStreamer);

    if (next < schedule.length) {
      const nextStreamer = schedule[next].username;
      let nextLink = document.getElementById('up-next');
      if (!nextLink) return currentStreamer;
      nextLink.setAttribute('href', `https://twitch.tv/${nextStreamer}`);
      nextLink.innerText = nextStreamer;
    } else {
      const upNextH3 = document.getElementById('up-next-h3');
      if (upNextH3) {
        upNextH3.style.display = 'none';
      }
    }

    return currentStreamer;
  }
  window.addEventListener('load', async () => {
    const response = await fetch('https://api.nethackathon.org/event/current/schedule');
    const data = await response.json();
    const schedule = data.sort((a: Streamer, b: Streamer) => {
      return a.start_time.localeCompare(b.start_time);
    });
    let currentStreamer = getCurrentStreamer(schedule, null);
    let twitchEmbed = new Twitch.Embed("twitch-embed", {
      width: "100%",
      height: 480,
      channel: currentStreamer,
      // TODO theme based on djinni
    });

    window.setInterval(() => {
      getCurrentStreamer(schedule, twitchEmbed);
    }, 5000);
  });
</script>
