---

import Charity from '../components/Charity.astro';
import Logo from '../components/Logo.astro';
import MagicLamp from '../components/MagicLamp.astro';
import NavComponent from '../components/Nav.astro';
import Tagline from '../components/Tagline.astro';
import favicon from '../images/favicon.png';
const { currentPage } = Astro.props;
const response = await fetch(`${import.meta.env.NODE_API}/events`)
  .then((response) => response.json());
const currentEvent = response.events[response.events.length - 1];
const lastEvent = response.events[response.events.length - 2];

---
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width,initial-scale=1.0">
      <link rel="icon" href={favicon}>
      <title>NetHackathon</title>
      <meta name="description" content="NetHackathon is an event where, twice a year, Twitch content creators stream NetHack continuously for 48 hours.">
      <meta property="og:type" content="website">
      <meta property="og:url" content="https://nethackathon.org/">
      <meta property="og:title" content="NetHackathon">
      <meta property="og:description" content="Twice a year, Twitch content creators stream NetHack continuously for over 48 hours!">
      <meta property="og:image" content="https://nethackathon.org/favicon.png">
    </head>
    <body>
      <header>
        { currentEvent.charity && <Charity /> }
        <Logo />
        { false && <Tagline /> }
        <NavComponent currentEvent={currentEvent} lastEvent={lastEvent} currentPage={currentPage} />
        <slot name="nav" />
      </header>
      <main>
        <slot />
        <MagicLamp />
      </main>
    </body>
  </html>


<style is:global>
  :root {
    --color-dark: rgb(0, 0, 0);
    --color-dark-highlight: rgb(27, 27, 27);
    --color-light: rgb(255, 255, 255);
    --color-light-highlight: rgb(227, 227, 227);
    --color-a: rgb(235, 86, 79);
    --color-b: rgb(150, 149, 248);
    --color-c: rgb(234, 51, 247);
  }
  body {
    font-family: "DejaVu Sans Mono", "Menlo", sans-serif;
    font-size: 15pt;
  }
  h2 {
    font-size: 22pt;
  }
  a {
    color: var(--color-b);
    font-weight: bold;
  }
  header {
    display: grid;
    gap: 0.5em;
  }
  main {
    margin: 1em 0;
    display: grid;
    gap: 0.5em;
  }
  section {
    padding: 0 1em;
    border: 1px solid;
    border-radius: 3px;
  }
  section a, section h2, section h3 {
    color: var(--color-b);
  }
  strong.a, section.a a, section.a h2, section.a h3 {
    color: var(--color-a);
  }
  strong.b, section.b a, section.b h2, section.b h3 {
    color: var(--color-b);
  }
  strong.c, section.c a, section.c h2, section.c h3 {
    color: var(--color-c);
  }
  @media (min-width: 1264px) {
    body {
      padding: 2em 20%;
    }
  }
  @media (max-width: 1263px) {
    body {
      padding: 1em 2em 2em 2em;
    }
  }
  @media (min-width: 960px) {
    main {
      grid-template-columns: 1fr 1fr;
    }
    section.double {
      grid-column: 1 / 3;
    }
  }
  @media (max-width: 959px) {
    header {
      grid-template-columns: 1fr;
    }
    main {
      grid-template-columns: 1fr;
    }
  }
  :root, html[data-theme='dark'] {
    color: var(--color-light);
    background: var(--color-dark);
  }
  section[data-theme='dark'] {
    border-color: var(--color-light);
  }
  html[data-theme='light'] {
    color: var(--color-dark);
    background: var(--color-light);
  }
  section[data-theme='light'] {
    border-color: var(--color-dark);
  }
  @media (prefers-color-scheme: dark) {
    nav a:hover {
      background-color: var(--color-dark-highlight);
    }
  }
  @media (prefers-color-scheme: light) {
    nav a:hover {
      background-color: var(--color-light-highlight);
    }
  }
  nav {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    min-height: 48px;
    padding: 0 auto;
  }
  nav a {
    display: inline-block;
    line-height: 48px;
    height: 48px;
    font-size: x-large;
    padding: 0 1em;
  }
  nav a.active {
    color: var(--color-a);
  }
  .hidden {
    display: none !important;
  }
</style>
